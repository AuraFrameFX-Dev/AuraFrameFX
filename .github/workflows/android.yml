#!/bin/bash

# === 1. ANDROID SDK & CLI TOOLS SETUP ===

echo "Creating Android SDK directories..."
mkdir -p $HOME/Android/cmdline-tools
cd $HOME/Android/cmdline-tools

echo "Downloading Android command line tools..."
wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
unzip -q cmdline-tools.zip
rm cmdline-tools.zip
mv cmdline-tools latest

# Add environment variables to .bashrc if not already present
if ! grep -q ANDROID_HOME ~/.bashrc; then
  echo 'export ANDROID_HOME=$HOME/Android' >> ~/.bashrc
  echo 'export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools' >> ~/.bashrc
  export ANDROID_HOME=$HOME/Android
  export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
fi

echo "Installing essential SDK packages..."
yes | sdkmanager --sdk_root=$ANDROID_HOME --install "platform-tools" "build-tools;34.0.0" "platforms;android-34" "cmdline-tools;latest" "emulator" "ndk;25.2.9519653" "system-images;android-34;google_apis;x86_64"

# === 2. PROJECT CREATION (MANUAL) ===

echo ""
echo "Project scaffolding is best done with Android Studio or by copying a template project."
echo "To create a new project from CLI, copy an existing project or use 'android create project' (deprecated)."
echo "For modern projects, use Gradle:"
echo ""
echo "  mkdir MyApp && cd MyApp"
echo "  gradle init --type java-application"
echo ""
echo "Then add Android-specific build.gradle files (see Android documentation)."
echo ""

# === 3. AUTOMATION SCRIPTS ===

cat > build-release.sh <<'EOF'
#!/bin/bash
./gradlew clean assembleRelease
EOF
chmod +x build-release.sh

cat > install-apk.sh <<'EOF'
#!/bin/bash
APK=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
if [ -z "$APK" ]; then
  echo "No APK found. Build first!"
  exit 1
fi
adb install -r -g "$APK"
EOF
chmod +x install-apk.sh

# === 4. BASH ALIASES & FUNCTIONS ===

echo "
# Android CLI Shortcuts
alias adbl='adb devices -l'
alias apkinst='adb install -r -g'
alias logc='adb logcat -v threadtime -b main -b system -b crash'
alias gradle-opt='./gradlew --no-daemon --parallel --configure-on-demand'

function adb-all() {
  adb devices | grep -v List | cut -f1 | while read device; do
    adb -s \$device \"\$@\"
  done
}
" >> ~/.bashrc

# === 5. AI/ML MODEL DEPLOYMENT SCRIPT (OPTIONAL) ===

cat > deploy-models.sh <<'EOF'
#!/bin/bash
adb push ai_models/*.tflite /data/local/tmp/aura_models/
adb shell chmod 644 /data/local/tmp/aura_models/*
EOF
chmod +x deploy-models.sh

# === 6. DEBUGGING & PROFILING SCRIPTS ===

cat > profile-app.sh <<'EOF'
#!/bin/bash
PKG=${1:-com.your.package}
PID=$(adb shell pidof $PKG)
adb shell am profile start $PID /sdcard/app_profile.prof
sleep 30
adb shell am profile stop
adb pull /sdcard/app_profile.prof
echo "Analyze app_profile.prof with traceview or Android Studio Profiler."
EOF
chmod +x profile-app.sh

cat > heapdump.sh <<'EOF'
#!/bin/bash
PKG=${1:-com.your.package}
PID=$(adb shell pidof $PKG)
adb shell am dumpheap $PID /sdcard/app_heap.hprof
adb pull /sdcard/app_heap.hprof
echo "Analyze app_heap.hprof with jhat or Android Studio Profiler."
EOF
chmod +x heapdump.sh

# === 7. GRADLE OPTIMIZATION ===

if [ -f gradle.properties ]; then
  if ! grep -q org.gradle.parallel gradle.properties; then
    cat >> gradle.properties <<'EOF'
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.configureondemand=true
kotlin.incremental=true
android.useAndroidX=true
android.enableJetifier=true
EOF
  fi
fi

# === 8. FINAL INSTRUCTIONS ===

echo ""
echo "Setup complete!"
echo "Reload your shell with 'source ~/.bashrc'"
echo "Automation scripts are in your project directory."
echo "Use './build-release.sh' to build, './install-apk.sh' to install."
echo "For project creation, use Android Studio or Gradle templates."
echo "Happy Android CLI development! ðŸš€"
